{"ast":null,"code":"var _jsxFileName = \"/home/yash/programming/django_proj/iTweet/react-app/src/tweets/components.js\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction listTweet(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = \"GET\";\n  const url = \"http://localhost:8000/api/tweets/list\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    callback({\n      message: \"some error\"\n    }, 400);\n  };\n\n  xhr.send();\n}\n\nexport function TweetsList(props) {\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweets(response);\n      } else {\n        alert(\"There was an error\");\n      }\n    };\n\n    listTweet(myCallback);\n  }, []);\n  return tweets.map((tweet, index) => {\n    return /*#__PURE__*/React.createElement(Tweet, {\n      tweet: tweet,\n      className: \"my-5 py-5 border bg-white col-10\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    });\n  });\n}\nexport function ActionBtn(props) {\n  const {\n    tweet,\n    action\n  } = props;\n  return action.type === \"like\" ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, tweet.likes, \" Likes\") : /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, action.type);\n}\nexport function Tweet(props) {\n  const tweet = props.tweet;\n  const className = props.className;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, tweet.context), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn btn-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ActionBtn, {\n    tweet: tweet,\n    action: {\n      type: \"like\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ActionBtn, {\n    tweet: tweet,\n    action: {\n      type: \"unlike\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ActionBtn, {\n    tweet: tweet,\n    action: {\n      type: \"retweet\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/yash/programming/django_proj/iTweet/react-app/src/tweets/components.js"],"names":["React","useEffect","useState","listTweet","callback","xhr","XMLHttpRequest","method","url","responseType","open","onload","response","status","onerror","e","message","send","TweetsList","props","tweets","setTweets","myCallback","alert","map","tweet","index","ActionBtn","action","type","likes","Tweet","className","context"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction listTweet(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = \"GET\";\n  const url = \"http://localhost:8000/api/tweets/list\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n  xhr.onerror = function (e) {\n    callback({ message: \"some error\" }, 400);\n  };\n  xhr.send();\n}\n\nexport function TweetsList(props) {\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweets(response);\n      } else {\n        alert(\"There was an error\");\n      }\n    };\n    listTweet(myCallback);\n  }, []);\n  return tweets.map((tweet, index) => {\n    return (\n      <Tweet\n        tweet={tweet}\n        className=\"my-5 py-5 border bg-white col-10\"\n        key={index}\n      />\n    );\n  });\n}\n\nexport function ActionBtn(props) {\n  const { tweet, action } = props;\n  return action.type === \"like\" ? (\n    <button className=\"btn btn-primary\">{tweet.likes} Likes</button>\n  ) : (\n    <button className=\"btn btn-primary\">{action.type}</button>\n  );\n}\n\nexport function Tweet(props) {\n  const tweet = props.tweet;\n  const className = props.className;\n  return (\n    <div className={className}>\n      <p className=\"text-dark\">{tweet.context}</p>\n      <div className=\"btn btn-group\">\n        <ActionBtn tweet={tweet} action={{ type: \"like\" }} />\n        <ActionBtn tweet={tweet} action={{ type: \"unlike\" }} />\n        <ActionBtn tweet={tweet} action={{ type: \"retweet\" }} />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}