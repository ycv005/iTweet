{"ast":null,"code":"function lookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest(); // const url = `http://localhost:8000/api/tweets/list`;\n\n  const url = `http://localhost:8000${endpoint}`;\n  xhr.responseType = \"json\";\n  const csrftoken = getCsrfCookie(\"csrftoken\");\n  xhr.open(method, url);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n  if (csrftoken) {\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  }\n\n  xhr.onload = function () {\n    console.log(`here is the response- ${xhr.response} and status- ${xhr.status}`);\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    callback({\n      message: \"some error\"\n    }, 400);\n  };\n\n  xhr.send(jsonData);\n}\n\nexport function listTweet(callback) {\n  lookup(\"GET\", \"/api/tweets/list\", callback);\n}\nexport function createTweet(newTweet, callback) {\n  console.log(\"calling create tweet\");\n  lookup(\"POST\", \"/api/tweets/create\", callback, {\n    \"content\": newTweet\n  });\n}\n\nfunction getCsrfCookie(name) {\n  var cookieValue = null;\n\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}","map":{"version":3,"sources":["/home/yash/programming/django_proj/iTweet/react-app/src/lookup/components.js"],"names":["lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","getCsrfCookie","open","setRequestHeader","onload","console","log","response","status","onerror","e","message","send","listTweet","createTweet","newTweet","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent"],"mappings":"AAAA,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;AAChD,MAAIC,QAAJ;;AACA,MAAID,IAAJ,EAAU;AACRC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACD;;AACD,QAAMI,GAAG,GAAG,IAAIC,cAAJ,EAAZ,CALgD,CAMhD;;AACA,QAAMC,GAAG,GAAI,wBAAuBR,QAAS,EAA7C;AACAM,EAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AACA,QAAMC,SAAS,GAAGC,aAAa,CAAC,WAAD,CAA/B;AACAL,EAAAA,GAAG,CAACM,IAAJ,CAASb,MAAT,EAAiBS,GAAjB;AACAF,EAAAA,GAAG,CAACO,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;;AACA,MAAIH,SAAJ,EAAe;AACbJ,IAAAA,GAAG,CAACO,gBAAJ,CAAqB,uBAArB,EAA8C,gBAA9C;AACAP,IAAAA,GAAG,CAACO,gBAAJ,CAAqB,kBAArB,EAAyC,gBAAzC;AACAP,IAAAA,GAAG,CAACO,gBAAJ,CAAqB,aAArB,EAAoCH,SAApC;AACD;;AAEDJ,EAAAA,GAAG,CAACQ,MAAJ,GAAa,YAAY;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBV,GAAG,CAACW,QAAS,gBAAeX,GAAG,CAACY,MAAO,EAA5E;AACAjB,IAAAA,QAAQ,CAACK,GAAG,CAACW,QAAL,EAAeX,GAAG,CAACY,MAAnB,CAAR;AACD,GAHD;;AAIAZ,EAAAA,GAAG,CAACa,OAAJ,GAAc,UAAUC,CAAV,EAAa;AACzBnB,IAAAA,QAAQ,CAAC;AAAEoB,MAAAA,OAAO,EAAE;AAAX,KAAD,EAA4B,GAA5B,CAAR;AACD,GAFD;;AAGAf,EAAAA,GAAG,CAACgB,IAAJ,CAASnB,QAAT;AACD;;AAED,OAAO,SAASoB,SAAT,CAAmBtB,QAAnB,EAA6B;AAClCH,EAAAA,MAAM,CAAC,KAAD,EAAQ,kBAAR,EAA4BG,QAA5B,CAAN;AACD;AAED,OAAO,SAASuB,WAAT,CAAqBC,QAArB,EAA+BxB,QAA/B,EAAyC;AAC9Cc,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAlB,EAAAA,MAAM,CAAC,MAAD,EAAS,oBAAT,EAA+BG,QAA/B,EAAyC;AAAE,eAAWwB;AAAb,GAAzC,CAAN;AACD;;AAED,SAASd,aAAT,CAAuBe,IAAvB,EAA6B;AAC3B,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC7C,QAAIC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAIH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAb,CADuC,CAEvC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAAyCP,IAAI,GAAG,GAApD,EAAyD;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACD;AACF;AACF;;AACD,SAAON,WAAP;AACD","sourcesContent":["function lookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n  const xhr = new XMLHttpRequest();\n  // const url = `http://localhost:8000/api/tweets/list`;\n  const url = `http://localhost:8000${endpoint}`;\n  xhr.responseType = \"json\";\n  const csrftoken = getCsrfCookie(\"csrftoken\");\n  xhr.open(method, url);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  if (csrftoken) {\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  }\n\n  xhr.onload = function () {\n    console.log(`here is the response- ${xhr.response} and status- ${xhr.status}`)\n    callback(xhr.response, xhr.status);\n  };\n  xhr.onerror = function (e) {\n    callback({ message: \"some error\" }, 400);\n  };\n  xhr.send(jsonData);\n}\n\nexport function listTweet(callback) {\n  lookup(\"GET\", \"/api/tweets/list\", callback);\n}\n\nexport function createTweet(newTweet, callback) {\n  console.log(\"calling create tweet\")\n  lookup(\"POST\", \"/api/tweets/create\", callback, { \"content\": newTweet });\n}\n\nfunction getCsrfCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n"]},"metadata":{},"sourceType":"module"}