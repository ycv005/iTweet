{"version":3,"sources":["tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["TweetComponent","props","tempTweet","useState","newTweets","setNewTweets","textAreaRef","React","createRef","className","onSubmit","event","preventDefault","newVal","current","value","unshift","context","likes","id","ref","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","message","send","listTweet","console","log","alert","map","tweet","index","Tweet","key","ActionBtn","action","setLikes","userLike","justClicked","setJustClicked","display","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4756ceed.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { listTweet } from \"../lookup/index.js\";\n\nexport function TweetComponent(props) {\n  const [newTweets, setNewTweets] = useState([]);\n  const textAreaRef = React.createRef();\n  var tempTweet;\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newVal = textAreaRef.current.value;\n    tempTweet = [...newTweets];\n    tempTweet.unshift({\n      context: newVal,\n      likes: 0,\n      id: 2323,\n    });\n    setNewTweets(tempTweet);\n    textAreaRef.current.value = \"\";\n  };\n  return (\n    <div>\n      <form className=\"my-5\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <textarea\n            ref={textAreaRef}\n            required\n            className=\"form-control\"\n          ></textarea>\n        </div>\n        <div className=\"form-group\">\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Tweet Now\n          </button>\n        </div>\n      </form>\n      <TweetsList newTweets={newTweets} />\n    </div>\n  );\n}\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweetsInit(response);\n      } else {\n        console.log(\"possibly you didn't start the django server\");\n        alert(\"There was an error, ok-\", status);\n      }\n    };\n    listTweet(myCallback);\n  }, []);\n  return tweets.map((tweet, index) => {\n    return (\n      <Tweet\n        tweet={tweet}\n        className=\"my-5 py-5 border bg-white col-10\"\n        key={index}\n      />\n    );\n  });\n}\n\nexport function ActionBtn(props) {\n  const { tweet, action } = props;\n  // TODO: tweet.userLike is undefined\n  const [likes, setLikes] = useState(tweet.likes);\n  const [justClicked, setJustClicked] = useState(\n    tweet.userLike === true ? true : false\n  );\n  const handleClick = (event) => {\n    event.preventDefault();\n    if (action.type === \"like\") {\n      if (justClicked === false) {\n        setJustClicked(true);\n        setLikes(likes + 1);\n      } else {\n        setJustClicked(false);\n        setLikes(likes - 1);\n      }\n    }\n  };\n\n  const display =\n    action.type === \"like\" ? `${likes} Likes` : `${action.display}`;\n  return (\n    <button onClick={handleClick} className=\"btn btn-primary\">\n      {display}\n    </button>\n  );\n}\n\nexport function Tweet(props) {\n  const tweet = props.tweet;\n  const className = props.className;\n  return (\n    <div className={className}>\n      <p className=\"text-dark\">{tweet.context}</p>\n      <div className=\"btn btn-group\">\n        <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"Likes\" }} />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: \"unlike\", display: \"Unlike\" }}\n        />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: \"retweet\", display: \"Retweet\" }}\n        />\n      </div>\n    </div>\n  );\n}\n","export function listTweet(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = \"GET\";\n  const url = \"http://localhost:8000/api/tweets/list\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n  xhr.onerror = function (e) {\n    callback({ message: \"some error\" }, 400);\n  };\n  xhr.send();\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { TweetComponent } from \"./tweets/index.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <TweetComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}